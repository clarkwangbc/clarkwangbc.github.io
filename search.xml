<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[随机化完全区组设计 RCBD]]></title>
    <url>%2F2019%2F08%2F13%2F%E9%9A%8F%E6%9C%BA%E5%8C%96%E5%AE%8C%E5%85%A8%E5%8C%BA%E7%BB%84%E8%AE%BE%E8%AE%A1-RCBD%2F</url>
    <content type="text"><![CDATA[基本定义和概念 讨厌因子（nuisance factor）是一个可能对响应产生影响的设计因子，但是我们对之并不感兴趣。 当讨厌因子有时是未知且不可控时，我们采用随机化处理；当讨厌因子是已知但不可控时，我们采用协方差分析；当讨厌因子是已知且可控时，我们采用区组化（blocking）设计。 随机化完全区组设计（randomized complete block design）是指每一个区组内包含所有的处理。区组表示的是随机化约束。 RCBD 统计模型： 效应模型 effect model ​ y_i = \mu+\tau_i+\beta_j+\epsilon_{i,j} \left\{ \begin{array}{lr}i=1,2,..., a &\\ j=1,2,...,b\end{array}\right. 均值模型 y_i = \mu_{i,j}+\epsilon_{i,j}\left\{ \begin{array}{lr}i=1,2,..., a &\\ j=1,2,...,b\end{array}\right. RCBD 方差分析等式 SS = SS_{treatment}+SS_{blocks}+SS_E其中自由度分别是 $ab-1$，$a-1$，$(a-1)(b-1)$。 对区组的均值进行方差检验，其中$F0 = \frac{MS{blocks}}{MSE}$ 与$F{a,a-1,(a-1)(b-1)}$ 进行比较似乎可以验证假设$H_0:\beta_j=0$ 。通常来说，方差分析F的检验只需要基于随机化就可以说明是合理的，无需正态性假设，但是这对比较区组的均值的检验却并不适用，实际上这里的F的比值是检验区组的均值的等式加随机化约束。但在实践中，F检验法可以作为研究区组变量效应的一种近似的方法，当这一比值较大时，可以说明区组因子有较大影响。 RCBD 是一种降噪设计技术，它能有效地增加数据中的信噪比，提高了处理均值比较的精度。 多重比较RCBD 多重比较的方法与标准的方差分析的方法类似，可以使用方差分析中任意一种多重比较的方法，只需要将其中的公式简单地用区组数（$b$）代替单因子完全随机化设计的重复次数（$n$）就可以了；此外，还要使用随机区组设计中误差的自由度数$(a-1)(b-1)$来代替完全随机化设计的误差自由度 $[a(n-1)]$。 模型合适性检验我们需要警惕那些由正态性假定、处理或者区组的不等的误差方差以及区组-处理交互作用引起的潜在问题。如同在完全随机化设计中那样，残差分析是用于这类诊断性检验的主要工作。 如果残差与预测值低是一条曲线，例如对于低的预测值，存在着产生负残差的趋势，对于中等的预测值，存在着产生正残差的趋势，而对于高预测值，则尊在产生负残差的趋势，则这类图像暗示着区组与处理间存在交互作用。 随机完全化区组设计的其他方面 随机化区组模型的可加性：用于随机化区组设计的线性模型是可加的。 随机处理与区组： 如果处理和区组是随机的，方法同样适用。不过在对结果进行解释时，需要做相应的更改。 在区组是随机的情况下，如果出现处理-区组的交互作用，则关于处理均值的检验不收交互作用的影响。这是因为出处理和误差的期望均方值二者都含有交互作用效应。 样本量的选择：增加区组数会增大重复得到次数和误差的自由度，使得设计更加灵敏。关于随机化单因子设计的有关实验重复次数的方法仍然使用。只需注意自由度的问题。但增加区组数会增加实验成本，因此要权衡利弊，选择注意自由度的数值。 缺失值的估计：对于缺失值，一般有两种方法 近似分析法：估计这一缺失值，并把它作为真实数据进行通常的方差分析，并将误差自由度减小1；但这一方法会产生有偏均方值，得出过多的显著性结论。 精确分析法：用一般回归的显著性检验法来精确分析 一般回归的显著性检验法可以用来进行随机化完全区组设计的方差分析]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>实验设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu18.04关闭图形界面]]></title>
    <url>%2F2019%2F07%2F09%2FUbuntu18-04%E5%85%B3%E9%97%AD%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[在安装CUDA的时候，发现如果不关闭图形界面将无法安装。 但是网上提供的下述方法似乎在18.04失效了： 1sudo service lightdm stop 系统会提示 lightdm.service not loaded 但是事实上，Ubuntu 18.04 中需要使用更加麻烦的方法，需要设置后重新启动。 12sudo systemctl set-default multi-user.targetsudo reboot 重新开启图形界面如下： 12sudo systemctl set-default graphical.targetsudo reboot]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shadowsocks和SwitchOmega的安装与配置]]></title>
    <url>%2F2019%2F07%2F09%2FShadowsocks%E5%92%8CSwitchOmega%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[shadowsocks 安装与配置 由于Shadowsocks没有我使用的服务的加密方式，因此需要使用Shadowsocks-libev，一个用C语言开发的Shadowsocks版本： 1sudo apt install shadowsocks-libev 修改配置文件。先创建或者打开一个配置文件 1sudo nano /etc/shadowsocks-libev/config.json 然后在打开的文件中填写相应的服务信息： 12345678&#123; &quot;server&quot;:[&quot;[::0]&quot;, &quot;0.0.0.0&quot;], &quot;server_port&quot;:8388, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;barfoo!&quot;, &quot;timeout&quot;:60, &quot;method&quot;:&quot;aes-256-cfb&quot;&#125; 其中需要修改的是server, server_port, password和method。其中需要注意server的格式，这样才能同时适配ipv4和ipv6。 启动服务。在终端中输入 1ss-local -c /etc/shadowsocks-libev/config.json &amp; 其中&amp;表示在后台运行，可以去掉。 设置开机启动。我采用的方式是把该命令注册服务，首先创建并编辑文件： 1sudo nano /etc/systemd/system/shadowsocks.service 在文件中添加如下内容 1234567891011[Unit]Description=Shadowsocks Client ServiceAfter=network.target[Service]Type=simpleUser=rootExecStart=/usr/bin/ss-local -c /etc/shadowsocks-libev/config.json[Install]WantedBy=multi-user.target 然后在终端中输入如下命令是配置生效： 1systemctl enable /etc/systemd/system/shadowsocks.service SwitchOmega的安装和配置 安装SwitchOmega。有两种方法，一种是在浏览器的插件商店中安装，但是由于chrome的插件商店往往无法访问，可以采用第二种手动安装的方式。手动安装可以到SwitchOmega的Github上下载，然后拖到chrome的插件页面中。不过这种方法不知道为什么我也没成功，提示说我下载的这个crx文件有问题？最后chrome是通过账号同步的方式自动同步我在别的电脑上安装的插件。 当然其实可以用Firefox，这个倒是没什么问题。 安装SwitchOmega后，打开它的配置界面，然后点击左侧的proxy。在右侧代理服务器中，修改代理协议为SOCKS5，代理服务器为127.0.0.1，代理端口为1080，然后别忘记点击左侧的应用选项。如下图所示： 然后点击左侧的auto switch，先点击规则列表设置，选择AutoProxy，在下面填写规则列表网址： https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt， 然后点击按钮立即更新情景模式，稍等一会后下面的规则列表正文将会出现下载的文本。 然后在上面的切换规则中，删除最上面两个默认的规则，在下面一栏第一条的情景模式中选择proxy，第二条选择直接连接。最后点击应用选项即可。如下图所示： 搞定以上内容后，我们现在可随便打开一个网址，例如scholar.google.com，然后点击插件栏中的SwitchOmega，切换至auto switch模式即可。]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo + Github 博客搭建]]></title>
    <url>%2F2019%2F07%2F06%2FHexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[Hexo是一个基于Node.js的静态博客框架，安装简单，搭建方便。由于Hexo生成的是一个静态的网站，因此可以搭建在一些提供静态网站服务的地方，例如Github。所以整体来说这个轻量型的博客可以基本满足我的需求，但缺点就是不能随时更新博客，考虑到我的博客的更新频率，这也不会是太大的问题。 搭建步骤 Github个人网站 安装Node.js 和 Hexo 建立博客 发布文章 Github 个人网站在Github上新建一个仓库，仓库的名称取：用户名.github.io，例如我的用户名是clarkwangbc，因此这个仓库的名称就是clarkwangbc.github.io 然后需要讲Github与我的电脑连接起来，关于这一点，可以参考README.md中建立Git和Github的连接部分。 当然，确保你的电脑上安装了Git 安装Node.js 和 Hexo由于我的博客主要会在我的MacBook Pro上更新，因此以下的这些操作都是基于Mac的。 安装Node Version Manager (nvm) nvm 是一个开源的node.js多版本管理Bash工具，类似于Python中的pyenv工具，用于在Bash环境中随意切换已安装的node版本。目前nvm的版本是0.34.0，因此可以使用如下代码进行安装： 1curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash 或者是Wget 1wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash 具体可以参考官方指南。 安装Node.js 使用nvm安装最新的Node.js 1nvm install node nvm安装的可能不是Node官方推荐的稳定版本，因此建议参考官方推荐版本后安装： 1nvm install 10.16.0 安装Hexo 1npm install -g hexo-cli 建立博客安装hexo后，我们就可以建立我们的博客了。 首先我们建立一个Blog的文件夹，然后在此文件夹内初始化我们的博客： 1hexo init blog 然后我们可以简单看一下我们的博客，输入以下命令： 12hexo ghexo s 然后我们用浏览器打开 localhost:4000就可以看到我们的博客了。 当然这样的博客可能太简陋了，我们可以选择一个我们喜欢的主题，例如Next。 1git clone https://github.com/iissnan/hexo-theme-next themes/next 打开博客的根目录中的_config.yml文件，修改主题为next，并修改deploy信息如下 ： 然后再打开themes/next/_config.yml文件，调整主题的各种参数，这里我把主题的风格改为Mist。 更换主题后，我们可以用如下命令来实时观看我们的修改效果： 1hexo s --debug 在确认没有问题后，我们可以将博客推送到Github上。不过在此之前，我们得先安装一个部署到Github上的工具： 1npm install hexo-deployer-git --save 然后就可以部署了 1hexo d 有时候为了方便，我们会将生成和部署一起使用： 1hexo g -d 成功后便可以在自己的Github Page上浏览了。 发布文章 在命令行中输入 1hexo n "article_name" 在博客根目录下source/_post中多出了一个叫article_name.md的文件，使用markdown的编辑器打开就可以进行书写。 书写完成后，命令行中输入： 1hexo g -d 便可推送了]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git简易指南]]></title>
    <url>%2F2019%2F07%2F06%2FGit%E7%AE%80%E6%98%93%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[安装Git 可以使用基础软件管理包: 1sudo apt-get install git 或者使用源码直接编译: 1sudo apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev 更多的安装方式可以参考链接。 创建新仓库 创建新的文件夹，打开，然后执行以下命令创建新的git仓库。 1git init 检出仓库 执行以下命令以创建一个本地仓库的克隆版本： 1git clone /path/to/repository 如果是远端服务器上的仓库，你的命令会是这个样子： 1git clone username@host:/path/to/repository 工作流 你的本地仓库由 git 维护的三棵“树”组成。第一个是你的 工作目录，它持有实际文件；第二个是 缓存区（Index），它像个缓存区域，临时保存你的改动；最后是 HEAD，指向你最近一次提交后的结果。 添加与提交 你可以计划改动（把它们添加到缓存区），使用如下命令： 12git add &lt;filename&gt;git add * 这是 git 基本工作流程的第一步；使用如下命令以实际提交改动： 1git commit -m &quot;代码提交信息&quot; 现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。 推送改动 你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库： 1git push origin master 其中可以把 master 换成你想要推送的任何分支。 如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加： 1git remote add origin &lt;server&gt; 如此你就能够将你的改动推送到所添加的服务器上去了。 分支 分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”。在其他分支上进行开发，完成后再将它们合并到主分支上。 创建一个叫做“feature_x”的分支，并切换过去： 1git checkout -b feature_x 切换回主分支： 1git checkout master 再把新建的分支删掉： 1git branch -d feature_x 除非你将分支推送到远端仓库，不然该分支就是不为他人所见的： 1git push origin &lt;branch&gt; 更新与合并 要更新你的本地仓库至最新改动，执行： 1git pull 以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。要合并其他分支到你的当前分支（例如 master），执行： 1git merge &lt;branch&gt; 两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 冲突（conflicts）。 这时候就需要你修改这些文件来人肉合并这些 冲突（conflicts） 了。改完之后，你需要执行如下命令以将它们标记为合并成功： 1git add &lt;filename&gt; 在合并改动之前，也可以使用如下命令查看： 1git diff &lt;source_branch&gt; &lt;target_branch&gt; 替换本地改动 假如你做错事，你可以使用如下命令替换掉本地改动： 1git checkout -- &lt;filename&gt; 此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。 假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它: 12git fetch origingit reset --hard origin/master 原文链接]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 搜狗拼音输入法候选乱码]]></title>
    <url>%2F2019%2F07%2F05%2FUbuntu-%E6%90%9C%E7%8B%97%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%B3%95%E5%80%99%E9%80%89%E4%B9%B1%E7%A0%81%2F</url>
    <content type="text"><![CDATA[终端输入如下命令： 12cd ~/.configsudo rm -rf SogouPY* sogou* 然后注销即可(注意，这里必须是注销，不注销直接重启并不管用)]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>输入法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu安装NVIDIA驱动]]></title>
    <url>%2F2019%2F07%2F05%2FUbuntu%E5%AE%89%E8%A3%85NVIDIA%E9%A9%B1%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[我最近在使用Ubuntu的时候，不知道为什么，系统隔三差五地掉显卡驱动，所以在这里把装驱动的流程记录下来，供以后使用。 方法1：系统自动更新系统设置-&gt;软件更新-&gt;附加驱动-&gt;选择nvidia最新驱动-&gt;应用更改 方法2：官网下载自行编译先在官网下载好对应的显卡驱动。 Nvidia中文官网是 http://www.nvidia.cn/page/home.html 1. 打开终端，先删除旧的驱动1sudo apt-get purge nvidia* 2. 禁用自带的 nouveau nvidia 驱动首先通过以下命令创建一个文件 1sudo vim /etc/modprobe.d/blacklist-nouveau.conf 然后添加如下内容： 12blacklist nouveauoptions nouveau modeset=0 再更新一下 1sudo update-initramfs -u 修改后需要重启系统。确认下Nouveau是否已经被你干掉，使用命令： 1lsmod | grep nouveau 3.重启系统至文本模式，关闭 X-Window也可先进入图形桌面再运行init 3进入文本模式，再安装下载的驱动就无问题。 首先我们需要结束x-window的服务，否则驱动将无法正常安装。 关闭X-Window， 1sudo service lightdm stop 然后切换tty1控制台：Ctrl+Alt+F1即可。 4.安装驱动接下来就是最关键的一步了： 1sudo ./NVIDIA.run 开始安装，安装过程比较快。根据提示选择即可最后安装完毕后，重新启动X-Window： 1sudo service lightdm start 然后Ctrl+Alt+F7进入图形界面； 最后测试一下是否安装成功 12nvidia-sminvidia-settings 方法3：添加官方ppa源快捷键ctrl+alt+T打开命令终端，加入官方ppa源。 1sudo add-apt-repository ppa:graphics-drivers/ppa 需要输入密码并按enter键确认。之后刷新软件库并安装最新驱动。 12sudo apt-get updatesudo apt-get install nvidia-367nvidia-settings nvidia-prime 安装完成后通过下面命令查看是否安装成功。 1nvidia-settings 注意安装完成后要重启，有如下效果则安装完成，否则就说明安装有问题，尝试关闭UEFI保护试试。 原文链接]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>驱动</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何建立一个 Markdown Notebook]]></title>
    <url>%2F2019%2F07%2F05%2F%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AAMarkdown-Notebook%2F</url>
    <content type="text"><![CDATA[这是我个人的Markdown Notebook，主要记录我研究过程中有关编程开发的经验记录。之前我一直使用OneNote进行记录，但是OneNote对代码的支持太烂了，而且没有linux客户端，因此我决定使用Typora+Git+Github的方式来建立一个跨平台的个人笔记系统。 关于这个系统的建立，可以参见这个链接。 关于如何建立Git和Github的链接，可以参考这个链接。 关于如何使用Github建立自己的图床，可以参考这个链接。 接下来将会介绍整个笔记本的建立。 建立自己GitHub的私有仓库 首先进入GitHub的官网，在个人仓库页面里，创建一个私人的仓库。如下图所示： 然后进入项目页面，将该仓库克隆到本地。注意克隆到本地时，需要先进入到自己想要存该仓库的本地地址。 1git clone git@github.com:... 设置Typora的文件树视图，然后打开自己的仓库，就可以了。 使用Git推送笔记 123git add .git commit -m &quot;notes&quot;git push 一些需要注意的地方 新建文件、目录操作都可以在文件树视图里面进行，不小心关闭了软件，只需要打开最近打开的文件，目录树自动就加载出来了。 本地图片放到同级目录下，就可以使用相对路径引入，在本地看笔记很方便。 同步github比较麻烦，需要自己提交至github。而且笔记的分享功能没有了。 建立Git和Github的连接 安装Git ubuntu安装Git 1sudo apt-get install git 查看Git版本信息 1git version 配置Git用户信息 12git config --global user.name "name"git config --global user.email "name@email.com" 开启SSH服务 Ubuntu安装SSH 1apt-get install ssh 查看SSH服务状态 1ps -e | grep sshd 会显示如下，其中sshd表示ssh-server已启动 生成SSH Key 使用命令查看 SSH Key 是否存在，若存在则忽略这一步 1ls -al ~/.ssh 生成SSH Key，生成会让你填写 passphrase，连按三次回车跳过即可 1ssh-keygen -t rsa -C "name@email.com" 进入你刚才生成SSH Key的目录，查看 id_rsa 和 id_rsa.pub 文件 打开 id_rsa.pub 文件，并将内容复制到剪贴板 登录 GitHub，打开settings 页面，选择 SSH and GPG keys 选项，新建一个SSH key，名字可以随便起，然后将刚才复制的SSH Key粘贴到下面的key栏中，然后点击添加就完成了。添加之后mac/linux就可以建立本地的Git与Github的连接了。 使用Github建立图床 方法1：类似于建立私有仓库。图片使用git上传后，网页浏览复制图片URL，将URL中的blob替换成raw即可。 方法2：打开图片仓库，点击issue，拖拽需要上传的屠刀到issue的文本框内，等待上传完毕后，便会显示一个url，复制那个url就可以了。]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F07%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[不知不觉博士的第四年也快要结束，这也是我在清华的第八个年头，时光荏苒，我也不再年轻，却仍然一事无成，不由有些落寞。过去的日子湮灭在时光里，难以再寻觅，不禁有些可惜，遂想用此博客来记录接下来的点滴，而这也是Jasmine所一直期望我所做的。 所以这个博客，一方面能够帮助我记录我学术道路上一些心得和体会，另一方面我也会添加一些我个人的爱好和照片在里面。 我目前的研究内容主要是探索人工智能与人的交互，因此会涉及到人工智能的一些简单的开发，我并非计算机科班出生，有些方面的知识还会有些欠缺，因此可能会对网络上他人的一些内容进行重新整理并写在这里，供我自己以后参考学习；同时我还是在我的博客写写一些关于人机交互、人因工程、实验设计方面的知识。由于我之前有过一些虚拟现实和游戏相关的研究，可能也会在博客中谈谈自己的看法。 至于个人方面的内容，则纯粹是个人的爱好了。我比较喜欢打游戏和看电影，因此我会不定期的更新我对一些游戏的评测和电源的影评。我也比较喜欢动手拼装，所以也会有一些玩具和电脑的组装。有时候，我会和Jasmine一起外出游玩，如果拍到一些有趣的照片我也会放在这里。 这些算是我个人生活和学术一些记录，但如若能够对他人有些帮助，那也是非常值得的。]]></content>
      <categories>
        <category>随感</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
